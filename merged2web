#!/bin/bash

# Output a web page with a leaflet animation of the
# merged tracks given as input
ifile="${1:-/dev/stdin}"
ofile="${2:-/dev/stdout}"
exec 3<> "$ofile"

cat <<HERE >&3
<html>
	<head>
		<title>GPS race</title>
		<link rel=stylesheet href=../../leaflet/leaflet.css>
		<link rel=stylesheet href=../../leaflet/L.Control.MousePosition.css>
		<script src=../../leaflet/leaflet.js></script>
		<script src=../../leaflet/L.Control.MousePosition.js></script>
		<style>
			body { margin: 0px;  }
			#map { height: 100%; }
			#desc {
				position: fixed;
				bottom: 0em;
				left: 200px;
				z-index: 1000;
				background-color: rgba(255,255,255,0.5);
				font-size: 9pt;
			}
		</style>
	</head>
	<body>
		<div id=map></div>
		<div id=desc>pause:p, skip+:j, skip-:l, fast:i, slow:k, norm:o,
			restart:a</div>
		<script>
			var osm_streets = L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {id: 'OSM Streets', attribution: '<a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>'});
			var kartverket_matrikkel = L.tileLayer('http://opencache.statkart.no/gatekeeper/gk/gk.open_gmaps?layers=matrikkel_bakgrunn&zoom={z}&x={x}&y={y}', {id:'Kartverket matrikkel', attribution: 'Statens kartverk'})
			var mapbox_aerial  = L.tileLayer('https://api.mapbox.com/v4/mapbox.satellite/{z}/{x}/{y}.png?access_token=pk.eyJ1Ijoic2lndXJka24iLCJhIjoiY2lzYzBlbmhvMDAxcDJ5bWthMzV1YzljNSJ9.oJmwqXsUxgVLZv6ucSn5CQ', {id: 'Mapbox Aerial', attribution: '<a href="http://mapbox.com">Mapbox</a>'})
			var finn_aerial = L.tileLayer('http://maptiles3.finncdn.no/tileService/1.0.3/norortho/{z}/{x}/{y}.png', {id:'Finn.no aerial', attribution:'Finn.no'})
			var coords = [
HERE
while read line; do
	toks=($line);
	ntok=${#toks[@]}
	np=$(((ntok-1)/3))
	printf "\t\t\t\t[%s" ${toks[0]} >&3
	for((i=0;i<np;i++)); do
		printf ", L.latLng(%s,%s,%s)" ${toks[$((3*i+1))]} ${toks[$((3*i+2))]} ${toks[$((3*i+3))]} >&3
	done
	printf "],\n" >&3
done < "$ifile"
cat <<HERE >&3
			];
			var nsamp = coords.length;
			var np = coords[0].length-1;
			var t0 = coords[0][0];
			var t1 = coords[coords.length-1][0];
			// Find the bounding box
			var c1 = L.latLng(coords[0][1].lat, coords[0][1].lng, coords[0][1].alt);
			var c2 = L.latLng(c1.lat, c1.lng, c1.alt);
			for(var i = 0; i < nsamp; i++) {
				for(var j = 0; j < np; j++) {
					c1.lat = Math.min(c1.lat,coords[i][1+j].lat);
					c1.lng = Math.min(c1.lng,coords[i][1+j].lng);
					c1.alt = Math.min(c1.alt,coords[i][1+j].alt);
					c2.lat = Math.max(c2.lat,coords[i][1+j].lat);
					c2.lng = Math.max(c2.lng,coords[i][1+j].lng);
					c2.alt = Math.max(c2.alt,coords[i][1+j].alt);
				}
			}
			var cmid = L.latLng((c1.lat+c2.lat)/2,(c1.lng+c2.lng)/2,(c1.alt+c2.alt)/2);
			var map = L.map('map', {
				center: cmid,
				zoom: 16,
				layers: [mapbox_aerial],
			});
			map.fitBounds(L.latLngBounds(c1,c2));

			var layers = [
				{"obj":osm_streets,          "name":"OSM map",        "key":"1"},
				{"obj":kartverket_matrikkel, "name":"Kartverket map", "key":"2"},
				{"obj":mapbox_aerial,        "name":"Mapbox aerial",  "key":"3"},
				{"obj":finn_aerial,          "name":"Finn.no aerial", "key":"4"}
			];
			// Set up layers control
			var layer_args = {};
			for(var i in layers) layer_args[layers[i].name] = layers[i].obj;
			L.control.layers(layer_args).addTo(map);
			L.control.mousePosition().addTo(map);
			function set_layer(layer) {
				for(var i = 0; i < layers.length; i++)
					if(map.hasLayer(layers[i].obj))
						map.removeLayer(layers[i].obj);
				map.addLayer(layer);
			}
			function get_layer_idx() {
				for(var i = 0; i < layers.length; i++)
					if(map.hasLayer(layers[i].obj)) return i;
			}

			var frame  = 0;
			var eff_prev = 0;
			var speed  = 1;
			var paused = 0;
			var colors = ["red","blue","green","purple","orange","black","brown","magenta","cyan"];
			var points = [];
			for(var i = 0; i < np; i++) {
				var point = L.circleMarker(coords[0][1+i], {
					radius:5,
					color:colors[i],
				});
				point.addTo(map);
				points.push(point);
			}
			var paths = [];
			for(var i = 0; i < np; i++) {
				var path = L.polyline([coords[0][1+i]], {
					color: colors[i],
					weight: 1,
				 });
				path.addTo(map);
				paths.push(path);
			}
			function mod(a,b) { var c = a%b; return c<0?c+b:c; }
			function set_frame(i) {
				frame = i;
				var eff = mod(Math.floor(i),coords.length);
				for(var j = 0; j < np; j++)
					points[j].setLatLng(coords[eff][1+j]);
				if(Math.abs(eff-eff_prev) >= 1)
					set_path_length(i);
				eff_prev = eff;
			}
			function set_path_length(i) {
				var eff = mod(Math.floor(i),coords.length);
				for(var i = 0; i < np; i++) {
					var latlngs = [];
					for(var j = 0; j < eff; j++)
						latlngs.push(coords[j][1+i]);
					paths[i].setLatLngs(latlngs);
				}
			}
			setInterval(function() {
				if(paused) return;
				set_frame(frame+speed);
			}, 30);
			function code(a) {  return a.toUpperCase().charCodeAt(0); }
			document.onkeydown = function(e) {
				if(e.keyCode == code(" ") || e.keyCode == code("p"))
					paused = 1-paused;
				else if(e.keyCode == code("j")) set_frame(frame+20);
				else if(e.keyCode == code("l")) set_frame(frame-20);
				else if(e.keyCode == code("i")) speed *= 2;
				else if(e.keyCode == code("k")) speed /= 2;
				else if(e.keyCode == code("o")) speed  = 1;
				else if(e.keyCode == code("r")) speed = -speed;
				else if(e.keyCode == code("a")) set_frame(0);
				else {
					for(var i in layers) {
						if(e.keyCode == code(layers[i].key)) {
							set_layer(layers[i].obj);
							break;
						}
					}
				}
			}
		</script>
	</body>
</html>
HERE
